// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uno.Infrastructure.AppDbContext;

#nullable disable

namespace Uno.Infrastructure.Migrations
{
    [DbContext(typeof(UnoDbContext))]
    [Migration("20240103092855_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Base")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Uno.Domain.Entities.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("Space-efficient representation for C# enum values");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Base_Connector");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Base_Connector(ProjectId)");

                    b.ToTable("Connector", "Base", t =>
                        {
                            t.HasComment("Information on project control platforms for submitting issues");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.ConnectorInIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientMetaData")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectorMetaData")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IssueMetaData")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TryCount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Base_ConnectorInIssue");

                    b.HasIndex("ConnectorId")
                        .HasDatabaseName("IX_Base_ConnectorInIssue(ConnectorId)");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("IX_Base_ConnectorInIssue(IssueId)");

                    b.ToTable("ConnectorInIssue", "Base", t =>
                        {
                            t.HasComment("Stores many-to-many relationships between isuues and connectors");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.ConnectorReportPriorities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Base_ConnectorReportPriorities");

                    b.HasIndex("ConnectorId")
                        .HasDatabaseName("IX_Base_ConnectorReprtPriorities(ConnectorId)");

                    b.ToTable("ConnectorReportPriorities", "Base", t =>
                        {
                            t.HasComment("Stores connectors report priorities like bug or sub-task");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.ConnectorReportTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Base_ConnectorReportType");

                    b.HasIndex("ConnectorId")
                        .HasDatabaseName("IX_Base_ConnectorReprtTypes(ConnectorId)");

                    b.ToTable("ConnectorReportTypes", "Base", t =>
                        {
                            t.HasComment("Stores connectors report types like bug or sub-task");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reporter")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Base_Issue");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Base_Issue(ProjectId)");

                    b.ToTable("Issue", "Base", t =>
                        {
                            t.HasComment("User recordings to be sent to the project management platform");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.IssueAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("Space-efficient representation for C# enum values");

                    b.HasKey("Id")
                        .HasName("PK_Base_IssueAttachment");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("IX_Base_IssueAttachment(IssueId)");

                    b.ToTable("IssueAttachment", "Base", t =>
                        {
                            t.HasComment("Attachments with each Issue");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Base_Project");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Base_Project(UserId)");

                    b.ToTable("Project", "Base", t =>
                        {
                            t.HasComment("Project information in project management software");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SingupDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Base_User");

                    b.ToTable("User", "Base", t =>
                        {
                            t.HasComment("stores information about registered users in our application");
                        });
                });

            modelBuilder.Entity("Uno.Domain.Entities.Connector", b =>
                {
                    b.HasOne("Uno.Domain.Entities.Project", "Project")
                        .WithMany("Connectors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_Connector_Base_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Uno.Domain.Entities.ConnectorInIssue", b =>
                {
                    b.HasOne("Uno.Domain.Entities.Connector", "Connector")
                        .WithMany("ConnectorInIssues")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_ConnectorInIssue_Base_Connector");

                    b.HasOne("Uno.Domain.Entities.Issue", "Issue")
                        .WithMany("ConnectorInIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_ConnectorInIssue_Base_Issue");

                    b.Navigation("Connector");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Uno.Domain.Entities.ConnectorReportPriorities", b =>
                {
                    b.HasOne("Uno.Domain.Entities.Connector", "Connector")
                        .WithMany("ConnectorReportPriorities")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_ConnetorReportPriorities_Base_Connector");

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("Uno.Domain.Entities.ConnectorReportTypes", b =>
                {
                    b.HasOne("Uno.Domain.Entities.Connector", "Connector")
                        .WithMany("ConnectorReportTypes")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_ConnetorReportTypes_Base_Connector");

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("Uno.Domain.Entities.Issue", b =>
                {
                    b.HasOne("Uno.Domain.Entities.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_Issue_Base_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Uno.Domain.Entities.IssueAttachment", b =>
                {
                    b.HasOne("Uno.Domain.Entities.Issue", "Issue")
                        .WithMany("Attachments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_IssueAttachment_Base_Issue");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Uno.Domain.Entities.Project", b =>
                {
                    b.HasOne("Uno.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Base_Project_Base_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Uno.Domain.Entities.Connector", b =>
                {
                    b.Navigation("ConnectorInIssues");

                    b.Navigation("ConnectorReportPriorities");

                    b.Navigation("ConnectorReportTypes");
                });

            modelBuilder.Entity("Uno.Domain.Entities.Issue", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ConnectorInIssues");
                });

            modelBuilder.Entity("Uno.Domain.Entities.Project", b =>
                {
                    b.Navigation("Connectors");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("Uno.Domain.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
